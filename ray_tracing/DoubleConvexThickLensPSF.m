%% Ray tracing simulation of chromatic aberration
% Simulate the chromatic point spread function of a thick (biconvex) lens.
%
% ## Usage
% Modify the parameters, the first code section below, then run.
%
% ## Input
%
% Refer to the first code section below.
%
% ## Output
%
% ## Notes
%
% ### Polychromatic light sources
%
% If I wanted to simulate real colour images, I would model point spread
% functions for colour channels, not for individual wavelengths. I could do
% so by adding together the point spread functions for individual
% wavelengths, weighted by the quantum efficiencies of the camera sensor
% for the individual wavelengths, and weighted by the spectral power
% distribution of the light source. Such an approach relies on the
% following assumptions:
%
% - The camera sensor does not perform any on-chip processing to adjust the
%   relative responses of pixels based on assumptions of the light colour.
% - The scene is emitting light with the given spectral power distribution.
%
% I think it is cleaner to assume narrowband sensor responses for now, so
% that a point spread function for an individual wavelength corresponds
% exactly to the image recorded in the nearest colour channel.
%
% Presently, I output colour images by mixing together point spread
% functions for individual wavelengths, but this is purely for
% visualization. All mathematical analysis of chromatic aberration is done
% under narrowband sensor response assumptions. An advantage of this
% segregation is it is possible to estimate the theoretical chromatic
% aberration between individual wavelengths, ignoring the properties of the
% camera sensor. Furthermore, it is possible to run this script on an
% arbitrary number of wavelengths, and obtain as many estimates of
% chromatic aberration (not only three).
%
% ## References
% - Ray-sphere intersection testing:
%   - http://www.ccs.neu.edu/home/fell/CSU540/programs/RayTracingFormulas.htm
%   - https://www.siggraph.org/education/materials/HyperGraph/raytrace/rtinter1.htm
%   - https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection
% - Uniform sampling of the surface of a sphere:
%   http://mathworld.wolfram.com/SpherePointPicking.html

% Bernard Llanos
% Supervised by Dr. Y.H. Yang
% University of Alberta, Department of Computing Science
% File created June 7, 2017

%% Input data and parameters
% Refer to the documentation of `doubleSphericalLensPSF` for details

% ## Raytracing parameters

% ### Lens parameters
% Based on
% 'C:\Users\llanos\Google Drive\ThesisResearch\Data and Results\20170613_SimpleLenses_EdmundOptics\25mmDiameter40mmFLUncoatedDoubleConvexLens_prnt_45296.pdf'
% and
% 'C:\Users\llanos\Google Drive\ThesisResearch\Data and Results\20170613_SimpleLenses_EdmundOptics\25mmDiameter40mmFLUncoatedDoubleConvexLens.pdf'
lens_params.radius_front = 40.42;
lens_params.lens_radius = 25 / 2;
lens_params.axial_thickness = 5.30;
lens_params.radius_back = lens_params.radius_front;

ray_params.n_incident_rays = 250;
ray_params.sample_random = false;
ray_params.ior_environment = 1.0;

% #### Index of refraction
% The focal length specification wavelength is 587.6 nm
% At this wavelength, N-BK7 glass has a refractive index of 1.51680
% (https://www.pgo-online.com/intl/katalog/BK7.html)
% The refractive index at 480.0 nm is 1.52283
% The refractive index at 643.8 nm is 1.51472
% One or more refractive indices can be specified in the array `ior_lens`.
lens_params.ior_lens = [1.51472, 1.51680, 1.52283]; % Red, Green, Blue

% Index of the wavelength/index of refraction to be used to position the
% image plane
lens_params.ior_lens_reference_index = 2; % Use the green channel

% Wavelength values corresponding to indices of refraction (for display
% purposes only)
lens_params.wavelengths = [643.8, 587.6, 480.0];

% RGB colours to be used when displaying the results for the different
% wavelengths. Each row represents one RGB colour.
% Obtained using the quantum efficiencies presented in
% 'C:\Users\llanos\Google Drive\ThesisResearch\Equipment\FLEA3\20170508_FL3_GE_EMVA_Imaging Performance Specification.pdf'
% Image sensor: Sony ICX655, 2/3", Color (page 19)
lens_params.wavelengths_to_rgb = [
    0.38, 0.04, 0;
    0.12, 0.35, 0;
    0, 0.17, 0.44
    ];
% Normalize, for improved colour saturation
lens_params.wavelengths_to_rgb = lens_params.wavelengths_to_rgb ./...
    max(max(lens_params.wavelengths_to_rgb));

% ### Ray interpolation parameters
% Refer to the documentation of `densifyRays` for details
image_params.image_sampling = [400, 400];
% Some point spread functions are very sharp compared to others
% In this case, the combined image can be generated by normalizing each PSF
% by its maximum intensity before adding the individual images together.
% However, the final image will be a little misleading.
image_params.normalize_psfs_before_combining = false;
% Normalize colour images globally, over all scene depths (true), or per
% scene depth (false)
image_params.normalize_color_images_globally = false;

% ## Scene setup

% Field of view over which point light sources are distributed (at the
% reference depth, `light_distance_factor_focused`)
% (Actually, the field of view is larger than this, as this is the angle
% subtended by the midlines of the rectangular grid of lights, not the
% diagonals.)
% Set it to zero to use a single point light source instead.
scene_params.theta_max = pi / 6;
scene_params.n_lights_x = 8;
scene_params.n_lights_y = 8;

% Multiple of the focal length distance corresponding to the reference
% position for the plane of light sources. The image plane will be
% positioned such that a light source at this distance, and centered in the
% field of view, is in focus.
scene_params.light_distance_factor_focused = 3;

% Additional distances at which light sources will be placed, in units of
% focal lengths. Distances will be spaced uniformly in inverse depth space
% (with depth measured from the first principal plane of the lens).
% [ Largest distance, number of larger distances ]
scene_params.light_distance_factor_larger = [5, 1];
% [ Smallest distance, number of smaller distances ]
scene_params.light_distance_factor_smaller = [1.5, 1];

% Place light sources along the same rays through the center of the lens
% (true), or along the same rays parallel to the optical axis (false) when
% changing their depths.
scene_params.preserve_angle_over_depths = true;

% ## Debugging Flags
verbose.plot_light_positions = true;
verbose.verbose_ray_tracing = false;
verbose.verbose_ray_interpolation = false;
verbose.display_each_psf = false;
verbose.display_all_psf_each_ior = false;
verbose.display_all_psf_each_depth = true;
verbose.display_summary = true;

%% Run Simulation

[...
    X_image_real, X_image_ideal, max_irradiance, X_lights, I, I_color...
] = doubleSphericalLensPSF(...
    lens_params, ray_params, image_params, scene_params, verbose...
);